import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";
import resend from "@/lib/resend";
import { buildPlannerEmailHTML, buildPlannerEmailText } from "@/lib/mailer";

function admin() {
  const url = process.env.NEXT_PUBLIC_SUPABASE_URL!;
  const key = process.env.SUPABASE_SERVICE_ROLE!;
  return createClient(url, key, { auth: { persistSession: false } });
}

export async function POST(req: NextRequest) {
  try {
    // Accept FormData (from the planners page)
    const fd = await req.formData();

    const planner = String(fd.get("planner") ?? "").trim();
    const email = String(fd.get("email") ?? "").trim();
    const phone = String(fd.get("phone") ?? "").trim();
    const raw_date = String(fd.get("event_date") ?? "").trim();
const event_date = raw_date || null; // allow null when date not provided
 // yyyy-mm-dd from <input type="date">
    const city_venue = String(fd.get("venue") ?? "").trim();
    const roles_needed = String(fd.get("roles_needed") ?? "").trim();
    const notes = String(fd.get("notes") ?? "").trim();

    if (!planner || !email) {
      return NextResponse.json({ ok: false, error: "Missing required fields" }, { status: 400 });
    }

    const supa = admin();

    // Insert into planner_requests
    const { data, error } = await supa
      .from("planner_requests").insert([{ planner_name: planner,
        email,
        phone,
        event_date,      // store as text/date column as your table expects
        city_venue,
        roles_needed,
        notes,
        status: "new",
       }] as any)
      .select("id")
      .single();

    if (error) {
      return NextResponse.json({ ok: false, error: error.message }, { status: 500 });
    }

    // Email notification to you
    const origin = req.headers.get("origin") || process.env.NEXT_PUBLIC_SITE_URL || "https://forresterfields.vercel.app";
    const html = buildPlannerEmailHTML({
      planner,
      email,
      phone,
      (event_date || "(TBD)"),
      city_venue,
      roles_needed,
      notes,
      siteUrl: origin,
    });
    const text = buildPlannerEmailText({
      planner,
      email,
      phone,
      event_date,
      city_venue,
      roles_needed,
      notes,
      siteUrl: origin,
    });

    // Replace this with your real inbox
    await resend.emails.send({
      from: "Forrester Fields <noreply@forresterfields.com>",
      to: [process.env.NOTIFY_TO_EMAIL || "you@example.com"],
      subject: "New Planner Request",
      html,
      text,
    });

    return NextResponse.json({ ok: true, id: data.id });
  } catch (err: unknown) {
    const msg = err instanceof Error ? err.message : String(err);
    return NextResponse.json({ ok: false, error: msg }, { status: 500 });
  }
}
