import "../admin.css";
import CsvButton from "@/components/CsvButton";
import "../admin-ui.css";
import AdminNav from "@/components/AdminNav";
import ClientWorkersTable, { WorkerRow } from "./ClientWorkersTable";
import { createClient } from "@supabase/supabase-js";

type WorkerDB = {
  id: string;
  created_at: string;
  name?: string | null;
  full_name?: string | null;
  email?: string | null;
  phone?: string | null;
  availability?: string | null;
  roles?: string[] | null;
  references_text?: string | null; // reserved-word safe
  experience?: string | null;
  city?: string | null;
  age?: number | null;
  status?: string | null;
};

function getAdmin() {
  const url = process.env.NEXT_PUBLIC_SUPABASE_URL!;
  const key = process.env.SUPABASE_SERVICE_ROLE!;
  return createClient(url, key, { auth: { persistSession: false } });
}

export const dynamic = "force-dynamic";

async function getWorkers(): Promise<WorkerRow[]> {
  const supabase = getAdmin();

  const { data } = await supabase
    .from("workers")
    .select("id, created_at, name, full_name, email, phone, availability, roles, references_text, experience, city, age, status")
    .order("created_at", { ascending: false });

  const rows: WorkerDB[] = (data ?? []) as WorkerDB[];
  return rows.map((r) => {
    const displayName =
      (r.full_name ?? r.name ?? "").trim() ||
      [r.full_name, r.name].filter(Boolean).join(" ").trim();

    const rolesJoined =
      Array.isArray(r.roles) ? r.roles.join(", ") : (r.roles as unknown as string) ?? "";

    const normalizedStatus: WorkerRow["status"] = (["new", "contacted", "booked", "archived"] as const).includes(
      (r.status ?? "new") as WorkerRow["status"]
    )
      ? (r.status as WorkerRow["status"])
      : "new";

    return {
      id: r.id,
      created_at: r.created_at,
      name: displayName || "â€”",
      email: r.email ?? "",
      phone: r.phone ?? "",
      availability: r.availability ?? "",
      roles: rolesJoined,
      references_text: r.references_text ?? "",
      experience: r.experience ?? "",
      city: r.city ?? "",
      age: typeof r.age === "number" ? String(r.age) : (r.age ?? "") as string,
      status: normalizedStatus,
    };
  });
}

export default async function WorkersPage() {
  const rows = await getWorkers();
  return (
    <div className="max-w-5xl mx-auto px-4 py-10">
      <h1 className="font-display text-3xl mb-6">Workers</h1>
