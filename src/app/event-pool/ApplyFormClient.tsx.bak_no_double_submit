"use client";

import { useRouter } from "next/navigation";
import { useEffect, useRef } from "react";

const ROLES = [
  "Setup","Cleanup","Decorating","Greeting guests","Parking",
  "Passing drinks & apps","Serving food","Bartending",
  "Bathroom attendant","Driver",
];

export default function ApplyFormClient() {
  const router = useRouter();
  const formRef = useRef<HTMLFormElement | null>(null);

  



const requiredSelectors = [
      'input[name="name"]',
      'input[name="email"]',
      'input[name="phone"]',
      'input[name="city"]',
      'input[name="age"]',
      'select[name="availability"]',
      'textarea[name="experience"]',
      'textarea[name="references_text"]'
    ];





    
function mark(el: Element, bad: boolean) {
  if (!(el instanceof HTMLElement)) return;
  const on = ["ring-2","ring-red-400","border-red-500","focus:ring-red-400"];
  if (bad) on.forEach(c => el.classList.add(c));
  else on.forEach(c => el.classList.remove(c));
  el.setAttribute("aria-invalid", bad ? "true" : "false");
}

function isFilled(el: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) {
  if (el instanceof HTMLInputElement) {
    if (el.type === "checkbox" || el.type === "radio") return el.checked;
    return el.value.trim().length > 0;
  }
  if (el instanceof HTMLTextAreaElement) return el.value.trim().length > 0;
  if (el instanceof HTMLSelectElement) return !!el.value;
  return true;
}

function validateForm(root: HTMLElement) {
  const missing: HTMLElement[] = [];

  // Simple required fields list from earlier in file
  requiredSelectors.forEach(sel => {
    const el = root.querySelector(sel) as (HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement | null);
    if (!el) return;
    const ok = isFilled(el);
    mark(el, !ok);
    if (!ok) missing.push(el as HTMLElement);

    // clear error once user interacts again
    const clear = () => mark(el, !isFilled(el));
    el.addEventListener("input", clear, { once: true });
    el.addEventListener("change", clear, { once: true });
  });

  // GROUP RULE: at least one roles checkbox must be selected
  const roleBoxes = root.querySelectorAll(
    'input[name="roles"], input[name="roles[]"]'
  ) as NodeListOf<HTMLInputElement>;
  if (roleBoxes.length) {
    const anyChecked = Array.from(roleBoxes).some(b => b.checked);
    const anchor = roleBoxes[0]; // use first as visual anchor for red ring
    mark(anchor, !anyChecked);
    if (!anyChecked) missing.push(anchor as unknown as HTMLElement);

    // clear group error once any box toggles to checked
    roleBoxes.forEach(b => {
      b.addEventListener("change", () => {
        const again = Array.from(roleBoxes).some(bb => bb.checked);
        mark(anchor, !again);
      }, { once: true });
    });
  }

  return missing;
}

function handleSubmit(e: React.FormEvent) {
  const form = formRef.current;
  if (!form) return;

  const missing = validateForm(form);
  if (missing.length) {
    e.preventDefault();
    missing[0].scrollIntoView({ behavior: "smooth", block: "center" });
    (missing[0] as HTMLElement).focus?.();
    alert("Please fill in all required fields before submitting.");
    return;
  }

  // Submit to API, then soft-redirect
  e.preventDefault();
  const data = new FormData(form);
  const action = form.getAttribute("action") || "/api/workers/apply";

  fetch(action, { method: "POST", body: data })
    .then((res) => {
      if (!res.ok) throw new Error(String(res.status));
      router.push("/event-pool/thanks");
    })
    .catch(() => {
      alert("Something went wrong. Please try again.");
    });
}

// Attach validator + soft submit + redirect
  useEffect(() => {
    const form = formRef.current;
    if (!form) return;

    const isFilled = (el: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => {
      if (el instanceof HTMLInputElement) {
        if (el.type === "checkbox" || el.type === "radio") return el.checked;
        return el.value.trim().length > 0;
      }
      if (el instanceof HTMLTextAreaElement) return el.value.trim().length > 0;
      if (el instanceof HTMLSelectElement) return !!el.value;
      return true;
    };

    const mark = (el: Element, bad: boolean) => {
      if (!(el instanceof HTMLElement)) return;
      const cls = ["ring-2","ring-red-400","border-red-500","focus:ring-red-400"];
      cls.forEach(c => el.classList[bad ? "add" : "remove"](c));
      el.setAttribute("aria-invalid", bad ? "true" : "false");
    };

    const validate = (root: HTMLElement) => {
      const missing: HTMLElement[] = [];

      // simple requireds
      requiredSelectors.forEach(sel => {
        const el = root.querySelector(sel) as (HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement | null);
        if (!el) return;
        const ok = isFilled(el);
        mark(el, !ok);
        if (!ok) missing.push(el as HTMLElement);

        const clear = () => mark(el, !isFilled(el));
        el.addEventListener("input", clear, { once: true });
        el.addEventListener("change", clear, { once: true });
      });

      // roles group: any checked
      const roleBoxes = root.querySelectorAll('input[name="roles"], input[name="roles[]"]') as NodeListOf<HTMLInputElement>;
      if (roleBoxes.length) {
        const anyChecked = Array.from(roleBoxes).some(b => b.checked);
        const anchor = roleBoxes[0];
        mark(anchor, !anyChecked);
        if (!anyChecked) missing.push(anchor as unknown as HTMLElement);
        roleBoxes.forEach(b => {
          b.addEventListener("change", () => {
            const again = Array.from(roleBoxes).some(bb => bb.checked);
            mark(anchor, !again);
          }, { once: true });
        });
      }

      return missing;
    };

    const onSubmit = (e: SubmitEvent) => {
      const missing = validate(form);
      if (missing.length) {
        e.preventDefault();
        missing[0].scrollIntoView({ behavior: "smooth", block: "center" });
        (missing[0] as HTMLElement).focus?.();
        alert("Please fill in all required fields before submitting.");
        return;
      }

      // soft submit then redirect to thanks
      e.preventDefault();
      const data = new FormData(form);
      const action = form.getAttribute("action") || window.location.pathname;
      const method = (form.getAttribute("method") || "POST").toUpperCase();
      fetch(action, { method, body: data })
        .then((res) => {
          if (!res.ok) throw new Error(String(res.status));
          router.push("/event-pool/thanks");
        })
        .catch(() => {
          alert("Something went wrong. Please try again.");
        });
    };

    form.addEventListener("submit", onSubmit);
    return () => form.removeEventListener("submit", onSubmit);
  }, [router]);

  /* --------- UI (form) --------- */
  return (
    

<form
      ref={formRef}
      id="apply-form"
      noValidate
      className="grid gap-4 rounded-xl border p-5 bg-white"
      method="POST"
     action="/api/workers/apply" onSubmit={handleSubmit}>
      <div className="grid gap-4 sm:grid-cols-2">
        <label className="grid gap-1">
          <span className="text-sm font-medium">Full Name*</span>
          <input name="name" type="text" className="rounded-md border px-3 py-2" />
        </label>

        <label className="grid gap-1">
          <span className="text-sm font-medium">Email*</span>
          <input name="email" type="email" className="rounded-md border px-3 py-2" />
        </label>

        <label className="grid gap-1">
          <span className="text-sm font-medium">Phone*</span>
          <input name="phone" type="tel" className="rounded-md border px-3 py-2" />
        </label>

        <label className="grid gap-1">
          <span className="text-sm font-medium">City*</span>
          <input name="city" type="text" className="rounded-md border px-3 py-2" />
        </label>

        <label className="grid gap-1">
          <span className="text-sm font-medium">Age*</span>
          <input name="age" type="number" min="14" className="rounded-md border px-3 py-2" />
        </label>

        <label className="grid gap-1">
          <span className="text-sm font-medium">Availability*</span>
          <select name="availability" className="rounded-md border px-3 py-2">
            <option value="">Select…</option>
            <option>Weekdays</option>
            <option>Weeknights</option>
            <option>Weekends</option>
            <option>Flexible</option>
          </select>
        </label>
      </div>

      <fieldset className="mt-2">
        <legend className="text-sm font-medium">Roles you’re interested in* (choose at least one)</legend>
        <div className="mt-2 grid grid-cols-1 sm:grid-cols-2 gap-2">
          {ROLES.map((r) => (
            <label key={r} className="flex gap-2 items-center rounded-md border px-3 py-2">
              <input type="checkbox" name="roles" value={r} />
              <span>{r}</span>
            </label>
          ))}
        </div>
      </fieldset>

      <label className="grid gap-1">
        <span className="text-sm font-medium">Experience*</span>
        <textarea name="experience" rows={4} className="rounded-md border px-3 py-2" />
      </label>

      <label className="grid gap-1">
        <span className="text-sm font-medium">References*</span>
        <textarea name="references_text" rows={3} className="rounded-md border px-3 py-2" />
      </label>

      <div className="pt-2">
        <button type="submit" className="inline-flex items-center rounded-lg border px-4 py-2 text-sm hover:bg-slate-50">
          Submit Application
        </button>
      </div>
    </form>
  );
}
