/* eslint-disable */
export type InquiryEmailData = {
  name: string; email: string; phone: string;
  event_date: string; type_of_event: string; type_of_event_other?: string;
  inquiry_about: string; message: string; siteUrl: string;
};

export type WorkerEmailData = {
  name: string; email: string; phone: string; city: string; age: string;
  availability: string; roles: string; references_text: string; experience: string; siteUrl: string;
};

export type PlannerEmailData = {
  planner: string; email: string; phone: string; event_date: string;
  city_venue: string; roles_needed: string; notes: string; siteUrl: string;
};

const CSS = `
body{margin:0;background:#f6f7fb;font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;color:#0f172a}
.wrap{max-width:680px;margin:24px auto;padding:0 16px}
.card{background:#ffffff;border:1px solid #f9a8d4;border-radius:18px;overflow:hidden}
.hdr{background:#ffffff;color:#f471a1;padding:26px 22px;display:flex;align-items:center;gap:16px;border-bottom:2px solid #f8cfe2}
.hdr img{display:block;height:44px;margin-right:12px}
.hdr h1{font-size:22px;line-height:1.2;margin:0}
.body{padding:24px 22px 10px}
.row{display:flex;gap:14px;margin:10px 0}
.key{width:160px;color:#64748b}
.val{flex:1;color:#db2777}
.btn{display:inline-block;margin-top:18px;background:#ffffff;color:#f471a1;text-decoration:none;padding:12px 18px;border-radius:12px;font-weight:700;border:1px solid #f8cfe2}
.muted{color:#94a3b8;font-size:12px;margin:14px 0 22px}
.hr{height:2px;background:#f9a8d4;border:0;margin:0}
`;

function safe(t: unknown) {
  return String(t ?? "").replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c]!));
}
function note(t: unknown) { return safe(t).replace(/\n/g, "<br/>"); }
const LOGO_SRC = "cid:fflogo";  // attach this CID from the route

function rowsHTML(rows: Array<[string,string]>) {
  return rows.map(([k,v]) =>
    `<div class="row"><div class="key">${safe(k)}</div><div class="val">${v}</div></div>`
  ).join("");
}

function shell(title: string, rows: string, adminHref: string, siteUrl: string) {
  const site = String(siteUrl || "").replace(/^https?:\/\//, "");
  return `<!doctype html>
<html><head><meta charset="utf-8"/><meta name="viewport" content="width=device-width"/>
<style>${CSS}</style></head>
<body>
  <div class="wrap">
    <div class="card">
      <div class="hdr" style="background:#fde7f3!important">
        <img src="${LOGO_SRC}" alt="Forrester Fields logo"/>
        <h1>${safe(title)}</h1>
      </div>
      <div class="hr"></div>
      <div class="body">
        ${rows}
        <a class="btn" href="${adminHref}" style="display:inline-block!important">View in Admin</a>
        <div class="muted">Sent from ${safe(site)}</div>
      </div>
    </div>
  </div>
</body></html>`;
}

/* ---------- Inquiry ---------- */
export function buildInquiryEmailHTML(d: InquiryEmailData) {
  const rows = rowsHTML([
    ["Name", safe(d.name)],
    ["Email", safe(d.email)],
    ["Phone", safe(d.phone)],
    ["Event date", safe(d.event_date)],
    ["Type of event", safe(d.type_of_event) + (d.type_of_event_other ? ` ( ${safe(d.type_of_event_other)} )` : "")],
    ["Inquiring about", safe(d.inquiry_about)],
    ["Message", note(d.message) || "—"],
  ]);
  return shell("New Inquiry", rows, `${d.siteUrl}/admin/inquiries`, d.siteUrl);
}
export function buildInquiryEmailText(d: InquiryEmailData) {
  return [
    `Name: ${d.name}`, `Email: ${d.email}`, `Phone: ${d.phone}`,
    `Event date: ${d.event_date}`,
    `Type of event: ${d.type_of_event}${d.type_of_event_other ? ` (${d.type_of_event_other})` : ""}`,
    `Inquiring about: ${d.inquiry_about}`, "Message:", d.message || "—",
    "", `View: ${d.siteUrl}/admin/inquiries`,
  ].join("\n");
}

/* ---------- Worker ---------- */
export function buildWorkerEmailHTML(d: WorkerEmailData) {
  const rows = rowsHTML([
    ["Name", safe(d.name)],
    ["Email", safe(d.email)],
    ["Phone", safe(d.phone)],
    ["City", safe(d.city)],
    ["Age", safe(d.age)],
    ["Availability", safe(d.availability)],
    ["Roles", safe(d.roles)],
    ["References", note(d.references_text) || "—"],
    ["Experience", note(d.experience) || "—"],
  ]);
  return shell("New Worker Application", rows, `${d.siteUrl}/admin/workers`, d.siteUrl);
}
export function buildWorkerEmailText(d: WorkerEmailData) {
  return [
    `Name: ${d.name}`, `Email: ${d.email}`, `Phone: ${d.phone}`, `City: ${d.city}`,
    `Age: ${d.age}`, `Availability: ${d.availability}`, `Roles: ${d.roles}`,
    "References:", d.references_text || "—", "", "Experience:", d.experience || "—",
    "", `View: ${d.siteUrl}/admin/workers`,
  ].join("\n");
}

/* ---------- Planner Request ---------- */
export function buildPlannerEmailHTML(d: PlannerEmailData) {
  const rows = rowsHTML([
    ["Planner", safe(d.planner)],
    ["Email", safe(d.email)],
    ["Phone", safe(d.phone)],
    ["Event date", safe(d.event_date)],
    ["City / Venue", safe(d.city_venue)],
    ["Roles needed", safe(d.roles_needed)],
    ["Notes", note(d.notes) || "—"],
  ]);
  return shell("New Planner Request", rows, `${d.siteUrl}/admin/requests`, d.siteUrl);
}
export function buildPlannerEmailText(d: PlannerEmailData) {
  return [
    `Planner: ${d.planner}`, `Email: ${d.email}`, `Phone: ${d.phone}`,
    `Event date: ${d.event_date}`, `City/Venue: ${d.city_venue}`, `Roles needed: ${d.roles_needed}`,
    "Notes:", d.notes || "—", "", `View: ${d.siteUrl}/admin/requests`,
  ].join("\n");
}
