      {
        name: payload.name,
        email: payload.email,
        phone: payload.phone,
        city: payload.city,
        age: payload.age,
        availability: payload.availability,
        roles: payload.roles, // text[] column expects array
        references_text: payload.references_text,
        experience: payload.experience,
        status: "new",
      },
    ]);

    if (error) return NextResponse.json({ error: error.message }, { status: 500 });

    try {
      const to = process.env.NOTIFY_TO_EMAIL || "forresterfieldsweddings@gmail.com";
      // "payload" should be your object with name/email/etc.
      await sendWorkerApplicationEmail(to, payload as any);
    } catch (err) { console.warn("[email] notify failed", err); }
    return NextResponse.json({ ok: true });
  } catch (e) {
    const msg = e instanceof Error ? e.message : "Unknown error";
    return NextResponse.json({ error: msg }, { status: 500 });
  }
}


----- FILE: src/app/api/workers/delete/route.ts -----
import { NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";

function admin() {
  const url = process.env.NEXT_PUBLIC_SUPABASE_URL!;
  const key = process.env.SUPABASE_SERVICE_ROLE!;
  return createClient(url, key, { auth: { persistSession: false } });
}

export async function POST(req: Request) {
  try {
    const { id } = (await req.json()) as { id?: string };
    if (!id) {
      return NextResponse.json({ ok: false, error: "missing id" }, { status: 400 });
    }
    const supa = admin();
    const { error } = await supa.from("workers").delete().eq("id", id);
    if (error) return NextResponse.json({ ok: false, error: error.message }, { status: 500 });
    return NextResponse.json({ ok: true });
  } catch (err: unknown) {
    const msg = err instanceof Error ? err.message : String(err);
    return NextResponse.json({ ok: false, error: msg }, { status: 500 });
  }
}


----- FILE: src/app/api/workers/update/route.ts -----
import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";

// Canonical statuses we accept/store now
const CANONICAL = ["new","contacted","booked","denied","available","unavailable"] as const;
type Status = typeof CANONICAL[number];

// Also accept legacy "archived" and map -> "denied"
const LEGACY = ["archived"] as const;

function admin() {
  const url = process.env.NEXT_PUBLIC_SUPABASE_URL || "";
  const key = process.env.SUPABASE_SERVICE_ROLE || "";
  if (!url || !key) throw new Error("Supabase admin env vars missing");
  return createClient(url, key, { auth: { persistSession: false } });
}

function normalizeStatus(s: unknown): Status | null {
  const v = String(s ?? "").trim().toLowerCase();
  if ((CANONICAL as readonly string[]).includes(v)) return v as Status;
  if ((LEGACY as readonly string[]).includes(v)) return "denied"; // archived -> denied
  return null;
}

export async function POST(req: NextRequest) {
  try {
    const supa = admin();
    const body = (await req.json().catch(() => ({}))) as Record<string, unknown>;

    const id = String(body.id ?? "").trim();
    if (!id) return NextResponse.json({ ok: false, error: "Missing id" }, { status: 400 });

    // Support either `status` or legacy `decision: accept|deny`
    const decision = String(body.decision ?? "").trim().toLowerCase();
    let status = normalizeStatus(body.status);
    if (!status && (decision === "accept" || decision === "deny")) {
      status = decision === "accept" ? "booked" : "denied";
    }
    if (!status) {
      return NextResponse.json({ ok: false, error: "Invalid or missing status" }, { status: 400 });
    }

    const { data, error } = await supa
      .from("workers")
      .update({ status })
      .eq("id", id)
      .select("id,status")
      .maybeSingle();

    if (error)   return NextResponse.json({ ok: false, error: error.message }, { status: 500 });
    if (!data)   return NextResponse.json({ ok: false, error: "Not found" }, { status: 404 });

    return NextResponse.json({ ok: true, data });
  } catch (err: unknown) {
    const msg = err instanceof Error ? err.message : String(err);
    return NextResponse.json({ ok: false, error: msg }, { status: 500 });
  }
}


----- FILE: src/app/contact/ClientContactForm.tsx -----
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";

export default function ClientContactForm() {
  const router = useRouter();
  const [busy, setBusy] = useState(false);
  const [err, setErr] = useState<string | null>(null);

  async function onSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    if (busy) return;

    const fd = new FormData(e.currentTarget);
    const name = String(fd.get("name") || "").trim();
    const email = String(fd.get("email") || "").trim();
    const phone = String(fd.get("phone") || "").trim();
    const event_date = String(fd.get("event_date") || "").trim();
    const guestCount = String(fd.get("guestCount") || "").trim();
    const message = String(fd.get("message") || "").trim();

    if (!name || !email) {
      setErr("Please enter your name and email.");
      return;
    }

    // We’ll use planner_requests. Pack guest count + message into roles_needed free text.
    const payload = {
      planner_name: name,
      email,
      phone,
      event_date: event_date || null,
      city_venue: null,
      roles_needed: [
        guestCount ? `Guests: ${guestCount}` : null,
        message ? `Notes: ${message}` : null,
      ].filter(Boolean).join(" — "),
      status: "new",
    };

    setBusy(true);
    setErr(null);
    try {
      const res = await fetch("/api/planner-request", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      const j = await res.json().catch(() => ({}));
      if (!res.ok || !j?.ok) {
        throw new Error(j?.error || `Submit failed (${res.status})`);
      }
      router.push("/thanks");
    } catch (error) {
      setErr((error as Error).message || "Something went wrong. Please try again.");
      setBusy(false);
    }
  }

  return (
    <>
      {err && (
        <div className="mt-4 rounded-md border border-red-200 bg-red-50 p-3 text-red-700">
          {err}
        </div>
      )}

      <form onSubmit={onSubmit} className="mt-8 grid gap-4 max-w-xl">
        <input className="border p-3 rounded-md" name="name" placeholder="Your name" required />
        <input className="border p-3 rounded-md" name="email" type="email" placeholder="Email" required />
        <input className="border p-3 rounded-md" name="phone" placeholder="Phone" />
        <input className="border p-3 rounded-md" name="event_date" placeholder="Event date" />
        <input className="border p-3 rounded-md" name="guestCount" placeholder="Guest count" />
        <textarea className="border p-3 rounded-md" name="message" rows={5} placeholder="Tell us about your event"></textarea>
        <button className="btn btn-primary" disabled={busy}>{busy ? "Sending..." : "Send"}</button>
      </form>
    </>
  );
}


----- FILE: src/app/contact/page.tsx -----
export default function Contact() {
  return (
    <main className="container py-12">
      <h1 className="font-display text-4xl">Schedule a Tour / Check Your Date</h1>
      <p className="text-gray-600 mt-2">We’ll reply quickly with availability and next steps.</p>
      <form action="https://formsubmit.co/hello@forresterfields.com" method="POST" className="mt-8 grid gap-4 max-w-xl">
    <input type="hidden" name="_next" value="https://forresterfields.vercel.app/thanks" />
        <input type="hidden" name="_subject" value="New Inquiry from ForresterFields.com" />
        <input type="hidden" name="_captcha" value="false" />
        <input className="border p-3 rounded-md" name="name" placeholder="Your name" required />
        <input className="border p-3 rounded-md" name="email" type="email" placeholder="Email" required />
        <input className="border p-3 rounded-md" name="phone" placeholder="Phone" />
        <input className="border p-3 rounded-md" name="date" placeholder="Event date" />
        <input className="border p-3 rounded-md" name="guestCount" placeholder="Guest count" />
        <textarea className="border p-3 rounded-md" name="message" rows={5} placeholder="Tell us about your event"></textarea>
        <button className="btn btn-primary">Send</button>
      </form>
    </main>
  );
}


----- FILE: src/app/event-pool/ApplyFormClient.tsx -----
"use client";

import { useRouter } from "next/navigation";
import { useState, FormEvent } from "react";

const ROLES = [
  "Setup","Cleanup","Decorating","Greeting guests","Parking",
  "Passing drinks & apps","Serving food","Bartending",
  "Bathroom attendant","Driver",
];

export default function ApplyFormClient() {
  const router = useRouter();
  const [status, setStatus] = useState<"idle"|"loading"|"error">("idle");
  const [err, setErr] = useState<string | null>(null);

  async function onSubmit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    setStatus("loading");
    setErr(null);

    const fd = new FormData(e.currentTarget);
    const roles = fd.getAll("roles").map(String);

    const payload = {
      name: String(fd.get("name") || "").trim(),
      email: String(fd.get("email") || "").trim(),
      phone: String(fd.get("phone") || "").trim(),
      city: String(fd.get("city") || "").trim(),
      age: String(fd.get("age") || "").trim(),
      availability: String(fd.get("availability") || "").trim(),
      references_text: String(fd.get("references_text") || "").trim(),
      experience: String(fd.get("experience") || "").trim(),
      roles,
    };

    try {
      const res = await fetch("/api/workers/apply", {
        method: "POST",
        headers: { "content-type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (!res.ok) {
        const j = await res.json().catch(() => ({}));
        throw new Error(j?.error || `Request failed (${res.status})`);
      }

      router.push("/event-pool/thanks");
    } catch (e) {
      setStatus("error");
      setErr(e instanceof Error ? e.message : "Something went wrong.");
    }
  }

  return (
    <div className="mt-6">
      {status === "error" && (
        <div className="bg-red-100 border border-red-300 text-red-800 px-4 py-3 rounded-lg mb-4">
          {err || "There was a problem submitting your application."}
        </div>
      )}

      <form onSubmit={onSubmit} className="space-y-4">
        <input name="name" required placeholder="Full name" className="w-full border rounded-lg px-3 py-2" />
        <input name="email" type="email" required placeholder="Email" className="w-full border rounded-lg px-3 py-2" />
        <input name="phone" placeholder="Phone" className="w-full border rounded-lg px-3 py-2" />
        <input name="city" placeholder="City" className="w-full border rounded-lg px-3 py-2" />
        <input name="age" placeholder="Age" className="w-full border rounded-lg px-3 py-2" />

        <div>
          <p className="font-medium mb-2">Roles you can do</p>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
            {ROLES.map((r) => (
              <label key={r} className="flex items-center gap-2">
                <input type="checkbox" name="roles" value={r} />
                <span>{r}</span>
              </label>
            ))}
          </div>
        </div>

        <textarea name="availability" placeholder="Availability" className="w-full border rounded-lg px-3 py-2 min-h-[64px]" />
        <textarea name="references_text" placeholder="References" className="w-full border rounded-lg px-3 py-2 min-h-[64px]" />
        <textarea name="experience" placeholder="Experience" className="w-full border rounded-lg px-3 py-2 min-h-[64px]" />

        <button
          type="submit"
          disabled={status === "loading"}
          className="w-full rounded-md bg-emerald-700 text-white px-4 py-2 disabled:opacity-50"
        >
          {status === "loading" ? "Submitting..." : "Submit"}
        </button>
      </form>
    </div>
  );
}


----- FILE: src/app/event-pool/PlannerRequestFormClient.tsx -----
"use client";

import { useState, FormEvent } from "react";
import { useRouter } from "next/navigation";

export default function PlannerRequestFormClient() {
  const router = useRouter();
  const [status, setStatus] = useState<"idle"|"loading"|"error"|"ok">("idle");
  const [err, setErr] = useState<string | null>(null);

  async function onSubmit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    setStatus("loading");
    setErr(null);

    const form = e.currentTarget;
    const fd = new FormData(form);

    try {
      const res = await fetch("/api/planner-request", {
        method: "POST",
        body: fd,
      });

      if (!res.ok) {
        const j = await res.json().catch(() => ({}));
        throw new Error(j?.error || `Request failed (${res.status})`);
      }

      setStatus("ok");
      router.push("/thanks");
    } catch (e) {
      setStatus("error");
      setErr(e instanceof Error ? e.message : "Something went wrong.");
    }
  }

  return (
    <div className="rounded-xl border bg-white p-6">
      {status === "error" && (
        <div className="mb-4 border border-red-300 bg-red-100 text-red-800 rounded-md px-3 py-2">
          {err || "There was a problem submitting your request."}
        </div>
      )}

      <form onSubmit={onSubmit} className="grid gap-4">
        {/* honeypot */}
        <input type="text" name="_gotcha" className="hidden" tabIndex={-1} autoComplete="off" />

        <div className="grid gap-3 sm:grid-cols-2">
          <div className="grid gap-1">
            <label className="text-sm font-medium">Planner name</label>
            <input name="planner" required placeholder="Your name" className="border rounded-md px-3 py-2" />
          </div>

          <div className="grid gap-1">
            <label className="text-sm font-medium">Email</label>
            <input name="email" type="email" required placeholder="name@email.com" className="border rounded-md px-3 py-2" />
          </div>
        </div>

        <div className="grid gap-3 sm:grid-cols-2">
          <div className="grid gap-1">
            <label className="text-sm font-medium">Phone</label>
            <input name="phone" placeholder="(###) ###-####" className="border rounded-md px-3 py-2" />
          </div>

          <div className="grid gap-1">
            <label className="text-sm font-medium">Date of wedding</label>
            <input name="event_date" type="date" className="border rounded-md px-3 py-2" />
          </div>
        </div>

        <div className="grid gap-1">
          <label className="text-sm font-medium">City / Venue</label>
          <input name="venue" placeholder="City or venue name" className="border rounded-md px-3 py-2" />
        </div>

        <div className="grid gap-1">
          <label className="text-sm font-medium">Roles needed</label>
          <input name="roles_needed" placeholder="e.g., Setup, Serving, Bartending" className="border rounded-md px-3 py-2" />
        </div>

        <div className="grid gap-1">
          <label className="text-sm font-medium">Brief description</label>
          <textarea name="notes" rows={5} placeholder="Tell us about your event (timeline, headcount, special needs, etc.)" className="border rounded-md px-3 py-2" />
        </div>

        <div className="pt-1">
          <button type="submit" disabled={status === "loading"} className="btn btn-primary">
            {status === "loading" ? "Submitting..." : "Send request"}
          </button>
        </div>
      </form>
    </div>
  );
}


----- FILE: src/app/event-pool/page.tsx -----
import Link from "next/link";
import { Playfair_Display } from "next/font/google";

const playfair = Playfair_Display({
  subsets: ["latin"],
  weight: ["400", "500", "600"],
  variable: "--font-playfair",
});

export default function EventPoolIndex() {
  return (
    <main className="max-w-4xl mx-auto px-4 py-12">
      {/* Elegant title font */}
      <h1 className={`${playfair.className} text-4xl font-medium leading-snug text-slate-800`}>
        The Event Pool by Forrester Fields
      </h1>

      {/* Intro paragraphs */}
      <div className="mt-6 space-y-4 text-[1rem] leading-7 text-slate-700">
        <p className="font-semibold text-slate-900">
          Are you a dependable worker looking to earn extra money on weekends you choose?
          <br />Or a special events planner scrambling for dependable workers?
        </p>

        <p>
          This is the place for you. Let’s help each other in the special events community of Walton County
          and Greater Atlanta area.
        </p>

        <p>
          As a special events planner, my job is to handle the behind-the-scenes hustle and make sure the big day
          goes off without a hitch. A successful event hinges on the reliability and efficiency of a cohesive team.
          I look for hard-working, dependable, ethical workers with strong references, communication, and transportation.
        </p>

        <p>
          Even when you secure the best workers well in advance, life happens. To make sure that never leaves an event
          short-staffed, I created a vetted pool of event professionals. If a worker becomes unavailable, they simply
          contact me directly so I can match a qualified replacement from the pool. This ensures every event stays fully
          staffed, smooth, and stress-free for planners and clients alike.
        </p>

        <p>
          If you’re looking to work special events in Walton County and Greater Atlanta area, apply below. If you’re a
          planner who’d like access to dependable workers, send us your request.
        </p>

        <p className="italic text-slate-800">— Marisol Forrester</p>
      </div>

      {/* Roles list */}
      <h2 className="mt-10 text-xl font-semibold text-slate-900">Typical Roles</h2>
      <ul className="mt-3 list-disc pl-6 space-y-1 text-[1rem] leading-7 text-slate-700">
        <li>Set-up / Clean-up</li>
        <li>Decorating</li>
        <li>Greeting guests</li>
        <li>Parking</li>
        <li>Passing drinks &amp; apps</li>
        <li>Serving food</li>
        <li>Bartending</li>
        <li>Bathroom attendants</li>
        <li>Driver (bride &amp; groom departure)</li>
      </ul>

      {/* Navigation cards */}
      <div className="mt-10 grid gap-4 sm:grid-cols-2">
        <Link href="/event-pool/workers" className="block rounded-xl border p-6 hover:bg-gray-50">
          <div className="text-lg font-semibold">For Workers</div>
          <div className="text-gray-600 mt-1 text-sm">See open roles and apply to join the pool.</div>
        </Link>

        <Link href="/event-pool/planners" className="block rounded-xl border p-6 hover:bg-gray-50">
          <div className="text-lg font-semibold">For Planners</div>
          <div className="text-gray-600 mt-1 text-sm">Request staff for your upcoming event.</div>
        </Link>
      </div>
